<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sungha&#39;s Blog</title>
  
  <subtitle>Daily life in ASLab</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yunseongha.github.io/"/>
  <updated>2020-11-08T11:35:22.440Z</updated>
  <id>https://yunseongha.github.io/</id>
  
  <author>
    <name>Sungha Yoon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Brute Force</title>
    <link href="https://yunseongha.github.io/2020/11/05/Brute-Force/"/>
    <id>https://yunseongha.github.io/2020/11/05/Brute-Force/</id>
    <published>2020-11-05T08:18:53.000Z</published>
    <updated>2020-11-08T11:35:22.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul><li>Just do all cases</li><li>Nested For loop</li><li>Permutation</li><li>Recursive call</li><li>Bit-mask</li></ul><h2 id="Just-do-all-cases"><a href="#Just-do-all-cases" class="headerlink" title="Just do all cases"></a>Just do all cases</h2><ul><li>Use for loop<ul><li>complexity: O(n^x)</li></ul></li><li>Example<ul><li><a href="https://www.acmicpc.net/problem/2309" target="_blank" rel="noopener">https://www.acmicpc.net/problem/2309</a><ul><li>Solution<ul><li>9C7 = 9C2</li><li>The sum of 9’s height - The sub of 2’s height = 100</li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/1476" target="_blank" rel="noopener">https://www.acmicpc.net/problem/1476</a><ul><li>Solution<ul><li>modular arithmetic</li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/14500" target="_blank" rel="noopener">https://www.acmicpc.net/problem/14500</a><ul><li>Solution<ul><li>Cases 19</li><li>Check all cases using ‘if’</li></ul></li></ul></li></ul></li></ul><h2 id="Nested-For-loop"><a href="#Nested-For-loop" class="headerlink" title="Nested For loop"></a>Nested For loop</h2><ul><li>Select subset of N<ul><li>It is almost not used because Using the recursive call or bit-mask is more simple and easier.</li></ul></li><li>Example<ul><li><a href="https://www.acmicpc.net/problem/9095" target="_blank" rel="noopener">https://www.acmicpc.net/problem/9095</a><ul><li>10 Nested For loop (BAD)</li><li>Solution<ul><li>Find rules</li><li>hint: fibonacci</li></ul></li></ul></li></ul></li></ul><h2 id="Permutation"><a href="#Permutation" class="headerlink" title="Permutation"></a>Permutation</h2><ul><li>Sequence from 1 to N<ul><li>Not in the same number</li></ul></li><li>The permutation with size N is N!</li><li>Next permutation<ul><li>In ‘algorithm’ in cpp STL, next_permutation and prev_permutation is already built.</li><li>How to find?<ol><li>Find the largest i that satisfies A[i-1] &lt; A[i]</li><li>Find the largest j that satisfies j&gt;=i AND A[j] &gt; A[i-1]</li><li>Swap A[i-1] and A[j]</li><li>Reverse the permutation from A[i]</li></ol></li><li>Example<ul><li><a href="https://www.acmicpc.net/problem/10972" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10972</a><ul><li>Solution<ul><li>Implement ‘How to find?’</li></ul></li></ul></li></ul></li></ul></li><li>Prev permutation<ul><li>Opposite of Next permutation</li><li>Example<ul><li><a href="https://www.acmicpc.net/problem/10973" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10973</a><ul><li>Solution<ul><li>Implement opposite of Next permutation ‘How to find?’</li><li>hint:<ul><li>Find the largest i that satisfies A[i-1] &gt; A[i]</li><li>Find the largest j that satisfies j&gt;=i AND A[j] &lt; A[i-1]</li></ul></li></ul></li></ul></li></ul></li><li>NOTE: next_permutation(), prev_permutation() can be used if N &lt;= 10</li></ul></li><li>All permutation<ul><li>Find all permutation</li><li>Example<ul><li><a href="https://www.acmicpc.net/problem/10974" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10974</a><ul><li>Solution<ul><li>Use next_permutation in cpp STL<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next_permutation(v.begin(), v.end());</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/10819" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10819</a><ul><li>Solution<ul><li>Use next_permutation and calculate the given expression</li><li>Before do next_permutation(), MUST sort the given array<ul><li>After sorting, all permutation can be got.</li></ul></li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/10971" target="_blank" rel="noopener">https://www.acmicpc.net/problem/10971</a><ul><li>Solution<ul><li>Use next_permutation to find the number of cases whether you can go or not</li><li>In next_permutation, Check whether you can go or not</li><li>hint<ul><li>cost(1-&gt;2-&gt;3-&gt;4) == cost(2-&gt;3-&gt;4-&gt;1) == cost(3-&gt;4-&gt;-&gt;1-&gt;2) == cost(4-&gt;1-&gt;2-&gt;3)</li><li>So, the start point can be fixed.</li><li>Complexity: <ul><li>All cases: O(N*N!)</li><li>Fixed the start point: O(N!) because (N-1)*(N-1)!</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>Combination<ul><li>In cpp, the combination can be implemented by next_permutation and prev_permutation.<ul><li>Q. What is the result to perform prev_permutation([1,1,1,1,0])?<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> e : v)&#123;</span><br><span class="line">    <span class="comment">// cstdio</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125; <span class="keyword">while</span>(prev_permutation(v.begin(), v.end()));</span><br><span class="line">      </span><br></pre></td></tr></table></figure><ul><li>A. <img src="https://github.com/YunSeongha/yunseongha.github.io/blob/master/2020/11/05/Brute-Force/com_result.JPG?raw=true" class="" title="result"><ul><li>Combination !!</li></ul></li></ul></li></ul></li><li>Example<ul><li><a href="https://www.acmicpc.net/problem/6603" target="_blank" rel="noopener">https://www.acmicpc.net/problem/6603</a><ul><li>Solution<ul><li>Select 6 numbers in K numbers -&gt; KC6</li><li>hint: make the number vector and the other vector(selected) composed of 0, 1<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; number; <span class="comment">// store K numbers</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; selected; <span class="comment">// store k-6 zeros and 6 ones, because we select 6 numbers.</span></span><br></pre></td></tr></table></figure></li><li>hint: perform prev or next_permutation(selected.begin(), selected.end()) and if the element of selected is 1, print out the element at that index in the number vector</li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/14888" target="_blank" rel="noopener">https://www.acmicpc.net/problem/14888</a><ul><li>Solution<ul><li>Make the operator vector and perform next_permutation<ul><li>e.g., the number of operators: [2,1,1,1] -&gt; vector: [0,0,1,2,3]</li></ul></li><li>Switch / Case<ul><li>0 -&gt; + | 1 -&gt; - | 2 -&gt; * | 3 -&gt; /</li></ul></li></ul></li><li>NOTE: Range problem (Use ‘auto’)</li></ul></li></ul></li></ul></li></ul><h2 id="Recursive-call"><a href="#Recursive-call" class="headerlink" title="Recursive call"></a>Recursive call</h2><ul><li>Example<ul><li><a href="https://www.acmicpc.net/problem/9095" target="_blank" rel="noopener">https://www.acmicpc.net/problem/9095</a><ul><li>It is already solved, but try again using recursive call.</li><li>Solution<ul><li>Using recursive call, add sum value to goal value<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">go(<span class="keyword">int</span> sum, <span class="keyword">int</span> goal)&#123;</span><br><span class="line">  <span class="keyword">if</span>(sum &gt; goal) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// fail to goal</span></span><br><span class="line">  <span class="keyword">if</span>(sum == goal) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// success</span></span><br><span class="line">  <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// only use 1,2,3</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">3</span>; i++)&#123;</span><br><span class="line">    now += go(sum+i, goal);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main...</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, go(<span class="number">0</span>, n));</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/1759" target="_blank" rel="noopener">https://www.acmicpc.net/problem/1759</a><ul><li>Solution<ul><li>1 &lt;= vowel(모음) &amp;&amp; 2 &lt;= consonant(자음)</li><li>sorting</li><li>make a function to call recursively<ul><li>goal: target length / words: available words(chars) / current: current password created / idx: index in words<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span>&amp; pwd)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> co = <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">int</span> vo = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">char</span> c : pwd) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'a'</span> || c == <span class="string">'e'</span> || c == <span class="string">'i'</span> || c == <span class="string">'o'</span> || c == <span class="string">'u'</span>) &#123;</span><br><span class="line">      vo += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      co += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> co &gt;= <span class="number">2</span> &amp;&amp; vo &gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> goal, <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &amp;words, <span class="built_in">string</span> current, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (goal == current.length()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (check(current)) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; current &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (idx &gt;= words.size()) &#123;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  go(goal, words, current + words[idx], idx + <span class="number">1</span>);</span><br><span class="line">  go(goal, words, current, idx + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main...</span></span><br><span class="line">sort(words.begin(), words.end());</span><br><span class="line">go(l, words, answer, <span class="number">0</span>); <span class="comment">// l: target length</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/6603" target="_blank" rel="noopener">https://www.acmicpc.net/problem/6603</a><ul><li>It is already solved, but try again using recursive call.</li><li>Solution<ul><li>Pass params<ul><li>num: available number</li><li>answer: to store all combination of num</li><li>idx: index in num</li></ul></li><li>Conditions<ol><li>answer.size() == 6 // success</li><li>idx == num.size() // index control</li></ol></li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/1182" target="_blank" rel="noopener">https://www.acmicpc.net/problem/1182</a><ul><li>Solution<ul><li>Pass params<ul><li>s: target sum</li><li>elems: the given numbers</li><li>current : current sum</li><li>idx: index in elems</li><li>cnt: answer</li></ul></li><li>Conditions<ol><li>idx == elems.size() &amp;&amp; current == target<br>// The reaseon that ‘idx == elems.size()’ is added is that all combinations must be considered.</li><li>idx == elems.size() return ;<br>// If all combinations are considered and ‘current != target’, it is fail.</li></ol></li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/14501" target="_blank" rel="noopener">https://www.acmicpc.net/problem/14501</a><ul><li>Solution<ul><li>Pass params<ul><li>ts: time sum</li><li>cs: cost sum</li><li>idx: index in tps(the given time and pay)</li></ul></li><li>Conditions<ol><li>ts &lt;= n // success, ts can be less than n (not equal)</li><li>idx &gt;= tps.size() // index control</li></ol></li><li>Recursive<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">max_cost(ts + tps[idx].first, cs + tps[idx].second, idx + tps[idx].first); <span class="comment">// time + working time, index + working time (not + 1, we should find the correct index)</span></span><br><span class="line">max_cost(ts + <span class="number">1</span>, cs, idx + <span class="number">1</span>); <span class="comment">// time +1, index +1</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/14888" target="_blank" rel="noopener">https://www.acmicpc.net/problem/14888</a><ul><li>It is already solved, but try again using recursive call.</li><li>Solution<ul><li>Pass params<ul><li>plus, subtr, multi, divide: the number of each OP</li><li>res: the result calculated</li><li>idx: index in nums (the given numbers)</li></ul></li><li>Conditions<ol><li>idx == nums.size() // check max value and min value</li><li>each OP &gt; 0 // When each OP more than 1, the result can be calculated</li></ol></li><li>Recursive<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(plus &gt; <span class="number">0</span>)</span><br><span class="line">  calc(plus - <span class="number">1</span>, subtr, multi, divide, res + nums[idx], idx + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(subtr &gt; <span class="number">0</span>)</span><br><span class="line">  calc(plus, subtr - <span class="number">1</span>, multi, divide, res - nums[idx], idx + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(multi &gt; <span class="number">0</span>)</span><br><span class="line">  calc(plus, subtr, multi - <span class="number">1</span>, divide, res * nums[idx], idx + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(divide &gt; <span class="number">0</span>)</span><br><span class="line">  calc(plus, subtr, multi, divide - <span class="number">1</span>, res / nums[idx], idx + <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li>NOTE: Range problem (I used long long int)</li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/15658" target="_blank" rel="noopener">https://www.acmicpc.net/problem/15658</a><ul><li>Extended problem 14888</li><li>Solution<ul><li>It is the same solution on problem 14888, because above solution already has constraint about index. (Condition 1)</li></ul></li></ul></li></ul></li></ul><h2 id="Bit-mask"><a href="#Bit-mask" class="headerlink" title="Bit-mask"></a>Bit-mask</h2><ul><li><p>Subset is expressed using bitwise operation.</p></li><li><p>&amp;(AND), |(OR), ~(NOT), ^(XOR)</p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">~A</th><th align="center">A&amp;B</th><th align="center">A|B</th><th align="center">A^B</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr></tbody></table></li><li><p>In case of bitwise operation of A and B, perform the operation one by one from the last digit.</p><ul><li><p>e.g., A = 27, B = 83</p><table><thead><tr><th align="center"></th><th align="center">Result</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">0011011(2)</td></tr><tr><td align="center">B</td><td align="center">1010011(2)</td></tr><tr><td align="center">A&amp;B</td><td align="center">0010011(2)</td></tr><tr><td align="center">A|B</td><td align="center">1011011(2)</td></tr><tr><td align="center">A^B</td><td align="center">1001000(2)</td></tr></tbody></table></li></ul></li><li><p>In case of NOT operation, the result is changed according to type.</p><table><thead><tr><th align="center"></th><th align="center">Result</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">01010011(2)</td></tr><tr><td align="center">~A</td><td align="center">10101100(2) [8-bit type]</td></tr><tr><td align="center">~A</td><td align="center">11111111 11111111 11111111 10101100(2) [32-bit type]</td></tr></tbody></table><ul><li>The return value is different depending on unsigned or signed.</li></ul></li><li><p>Shift left(&lt;&lt;), Shift right(&gt;&gt;)</p><ul><li>A &lt;&lt; B (Shift A to the left by B)<ul><li>A * 2^B</li><li>e.g.,<br>1 &lt;&lt; 0 = 1<br>1 &lt;&lt; 1 = 10(2) = 2<br>1 &lt;&lt; 2 = 100(2) = 4<br>1 &lt;&lt; 3 = 1000(2) = 8<br>3 &lt;&lt; 3 = 11000(2) = 24<br>5 &lt;&lt; 10 = 1010000000000(2) = 5120</li></ul></li><li>A &gt;&gt; B (Shift A to the right by B)<ul><li>A / 2^B<br>(A+B)/2 = (A+B) &gt;&gt; 1</li><li>e.g.,<br>1 &gt;&gt; 0 = 1<br>1 &gt;&gt; 1 = 0(2)<br>10 &gt;&gt; 1 = 0101(2) = 5<br>10 &gt;&gt; 2 = 0010(2) = 2<br>10 &gt;&gt; 3 = 0001(2) = 1<br>30 &gt;&gt; 1 = 01111(2) = 15<br>1024 &gt;&gt; 10 = 1(2) = 1</li></ul></li></ul></li><li><p>0 ~ N-1 (Not N)</p></li><li><p>Bitwise set can be expressed by integer</p><ul><li>{1,3,4,5,9} = 2^1 + 2^3 + 2^4 + 2^5 + 2^9 = 570 = 1000111010(2)</li><li>Check whether n is included in bitwise set<ul><li>If 2^n is in bitwise set of N, Check whether N &amp; (2^n) = 2^n<ul><li>N &amp; (2^n) = N &amp; (1 &lt;&lt; n)</li></ul></li><li>e.g., {1,3,4,5,9} = 2^1 + 2^3 + 2^4 + 2^5 + 2^9 = 570<br>570 &amp; 2^0 = 570 &amp; (1&lt;&lt;0) = 0 (X)<br>570 &amp; 2^1 = 570 &amp; (1&lt;&lt;1) = 2 (O)<br>570 &amp; 2^2 = 570 &amp; (1&lt;&lt;2) = 0 (X)</li></ul></li><li>Add n in bitwise set<ul><li>If you want to add n in bitwise set of N, use OR operation<ul><li>N | (2^n) = N | (1 &lt;&lt; n)</li><li>Condition: n is not in N</li></ul></li><li>e.g., {1,3,4,5,9} = 2^1 + 2^3 + 2^4 + 2^5 + 2^9 = 570<br>570 | 2^1 = 570 | (1 &lt;&lt; 1) = 570<br>570 | 2^2 = 570 | (1 &lt;&lt; 2) = 574<br>570 | 2^3 = 570 | (1 &lt;&lt; 3) = 570</li></ul></li><li>Remove n in bitwise set<ul><li>If you want to remove n in bitwise set, use AND, NOT operation<ul><li>N &amp; ~(2^n) = N &amp; ~(1 &lt;&lt; n)</li></ul></li><li>e.g., {1,3,4,5,9} = 2^1 + 2^3 + 2^4 + 2^5 + 2^9 = 570<br>570 &amp; ~2^1 = 570 &amp; ~(1 &lt;&lt; 1) = 568<br>570 &amp; ~2^2 = 570 &amp; ~(1 &lt;&lt; 2) = 570</li></ul></li><li>Toggle n in bitwise set (0 -&gt; 1, 1 -&gt; 0)<ul><li>If you want to change n in bitwise set, use XOR operation<ul><li>N ^ (2^n) = N ^ (1 &lt;&lt; n)</li></ul></li><li>e.g., {1,3,4,5,9} = 2^1 + 2^3 + 2^4 + 2^5 + 2^9 = 570<br>570 ^ 2^1 = 570 ^ (1 &lt;&lt; 1) = 568<br>570 ^ 2^2 = 570 ^ (1 &lt;&lt; 2) = 574</li></ul></li></ul></li><li><p>The entire set(0 ~ N-1): (1 &lt;&lt; N) - 1</p></li><li><p>Zero-set: 0</p></li><li><p>Operation priority</p><ul><li>Q. 1 &lt;&lt; N-1 : (1 &lt;&lt; N) - 1? 1 &lt;&lt; (N - 1)<ul><li>A. 1 &lt;&lt; (N - 1)</li></ul></li></ul></li><li><p>Why use bit-mask?</p><ul><li>Set can be expressed by the index of array.</li></ul></li><li><p>Bitset</p><ul><li>In cpp, int: 32-bit, long long: 64-bit<ul><li>If more than 64-bit, can’t be represented with integer</li><li>Then how?<ul><li>cpp bitset</li></ul></li></ul></li></ul></li><li><p>Example</p><ul><li><a href="https://www.acmicpc.net/problem/11723" target="_blank" rel="noopener">https://www.acmicpc.net/problem/11723</a><ul><li>Bitwise practice</li><li>Solution<ul><li>hint: add the following line in your code.<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><a href="https://www.acmicpc.net/problem/1182" target="_blank" rel="noopener">https://www.acmicpc.net/problem/1182</a><ul><li>It is already solved, but try again using bitset.</li><li>Solution<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Find all cases 1 ~ N-1: (1 &lt;&lt; N) -1)</span></span><br><span class="line"> <span class="comment">// start 1: 0 is zero-set and sum is 0. If the case finds sum 0, answer return 1. So, remove zero-set</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++) &#123;</span><br><span class="line">   <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">     <span class="comment">// Check whether j(j-bit) is included in current bitset</span></span><br><span class="line">     <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j)) &#123;</span><br><span class="line">       sum += elems[j];</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (sum == s) &#123;</span><br><span class="line">     answer += <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Contents&quot;&gt;&lt;a href=&quot;#Contents&quot; class=&quot;headerlink&quot; title=&quot;Contents&quot;&gt;&lt;/a&gt;Contents&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Just do all cases&lt;/li&gt;
&lt;li&gt;Nested For lo
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://yunseongha.github.io/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Algorithm Mathematics</title>
    <link href="https://yunseongha.github.io/2020/10/23/Algorithm-Mathematics/"/>
    <id>https://yunseongha.github.io/2020/10/23/Algorithm-Mathematics/</id>
    <published>2020-10-23T08:28:58.000Z</published>
    <updated>2020-11-05T14:08:44.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul><li>Modular</li><li>GCD, LCM</li><li>Prime Number</li></ul><h2 id="Modular"><a href="#Modular" class="headerlink" title="Modular"></a>Modular</h2><ul><li>Modular Arithmetic<ul><li>(A +|* B) mod M = ((A mod M) +|* (B mod M)) mod M</li></ul></li><li>Note: -, /<ul><li>(A - B) mod M = ((A mod M) - (B mod M) + M) mod M</li><li>(A / B) mod M -&gt; modular inverse</li></ul></li><li>Note: Range problem (int? long? long long?)</li></ul><h2 id="GCD-LCM"><a href="#GCD-LCM" class="headerlink" title="GCD, LCM"></a>GCD, LCM</h2><ul><li>GCD between 2 numbers using Euclidean algorithm<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gce(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> r = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>LCM can be gotten by GCD<ul><li>LCM = GCD * (a/GCD) * (b/GCD) = (a*b)/GCD</li></ul></li><li>Examples<ul><li><a href="https://www.acmicpc.net/problem/9613" target="_blank" rel="noopener">https://www.acmicpc.net/problem/9613</a><ul><li>Note: Range problem</li></ul></li></ul></li></ul><h2 id="Prime-Number"><a href="#Prime-Number" class="headerlink" title="Prime Number"></a>Prime Number</h2><ul><li>To check if N is prime or not, devide N by 2 ~ sqrt(N)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n % i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>To find prime numbers between 1 ~ N, use sieve of eratosthenes<ul><li>How to?<ul><li>Write 2 ~ N</li><li>Find least number between undeleted numbers </li><li>That number is prime number</li><li>Delete multiples of that number<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//init false</span></span><br><span class="line"><span class="keyword">bool</span> check[N+<span class="number">1</span>];</span><br><span class="line"><span class="comment">// vector&lt;bool&gt; check(N+1, false);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(check[i] == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i*<span class="number">2</span>; j&lt;=n; j+=i)&#123;</span><br><span class="line">            check[j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;N+<span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(check[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>Examples<ul><li><a href="https://www.acmicpc.net/problem/1929" target="_blank" rel="noopener">https://www.acmicpc.net/problem/1929</a></li><li><a href="https://www.acmicpc.net/problem/6588" target="_blank" rel="noopener">https://www.acmicpc.net/problem/6588</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Contents&quot;&gt;&lt;a href=&quot;#Contents&quot; class=&quot;headerlink&quot; title=&quot;Contents&quot;&gt;&lt;/a&gt;Contents&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Modular&lt;/li&gt;
&lt;li&gt;GCD, LCM&lt;/li&gt;
&lt;li&gt;Prime
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://yunseongha.github.io/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Set up and Configure Network File System</title>
    <link href="https://yunseongha.github.io/2020/01/22/Set-up-and-Configure-Network-File-System/"/>
    <id>https://yunseongha.github.io/2020/01/22/Set-up-and-Configure-Network-File-System/</id>
    <published>2020-01-22T05:49:23.000Z</published>
    <updated>2020-01-22T06:07:05.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h2><h4 id="Server-Side"><a href="#Server-Side" class="headerlink" title="Server Side"></a>Server Side</h4><ol><li>install or update nfs-kernel-server<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nfs-kernel-server</span><br></pre></td></tr></table></figure></li><li>configure /etc/exports file<br>add the following<figure class="highlight bash"><figcaption><span>/etc/exports</span><a href="https://linux.die.net/man/5/exports" target="_blank" rel="noopener">(manual)</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;shared folder path&gt;    &lt;ipaddr&gt;(&lt;option&gt;)</span><br></pre></td></tr></table></figure></li></ol><ul><li>option<ul><li>ro: read only</li><li>sync: Reply to requests only after the changes have been committed to stable storage</li><li>root_squash: Map requests from uid/gid 0 to the anonymous uid/gid. Note that this does not apply to any other uids or gids that might be equally sensitive, such as user bin or group staff.</li><li>subtree_check: check subtree</li></ul></li><li>If you need to connect with any client in your network,  you give ip address the following (your network routing address is 192.168.0.1)<ul><li>192.168.0.0/24 </li></ul></li></ul><ol start="3"><li>run the following command<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo exportfs -ra</span><br></pre></td></tr></table></figure></li></ol><h4 id="Client-Side"><a href="#Client-Side" class="headerlink" title="Client Side"></a>Client Side</h4><ol><li>install or update nfs-common<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nfs-common</span><br></pre></td></tr></table></figure></li><li>make share folder (mount point)</li><li>configure /etc/fstab file</li></ol><ul><li>add the following<figure class="highlight bash"><figcaption><span>/etc/fstab</span><a href="https://www.thegeekdiary.com/common-nfs-mount-options-in-linux/" target="_blank" rel="noopener">(nfs options)</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;server-ip&gt;:&lt;server-shared-folder-path&gt;  &lt;client-share-folder-path&gt;  nfs  &lt;option&gt;</span><br></pre></td></tr></table></figure></li><li>run the following command<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount -a</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;How-to&quot;&gt;&lt;a href=&quot;#How-to&quot; class=&quot;headerlink&quot; title=&quot;How to&quot;&gt;&lt;/a&gt;How to&lt;/h2&gt;&lt;h4 id=&quot;Server-Side&quot;&gt;&lt;a href=&quot;#Server-Side&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://yunseongha.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Git strategy</title>
    <link href="https://yunseongha.github.io/2019/12/18/Git-strategy/"/>
    <id>https://yunseongha.github.io/2019/12/18/Git-strategy/</id>
    <published>2019-12-18T13:19:50.000Z</published>
    <updated>2019-12-18T13:21:12.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><p>I find good post about git strategy.</p><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><a href="http://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html" title="" target="_blank">우린 Git-flow를 사용하고 있어요 - 나동호</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Contents&quot;&gt;&lt;a href=&quot;#Contents&quot; class=&quot;headerlink&quot; title=&quot;Contents&quot;&gt;&lt;/a&gt;Contents&lt;/h2&gt;&lt;p&gt;I find good post about git strategy.&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="git" scheme="https://yunseongha.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Character compression</title>
    <link href="https://yunseongha.github.io/2019/12/18/Character-compression/"/>
    <id>https://yunseongha.github.io/2019/12/18/Character-compression/</id>
    <published>2019-12-18T12:31:42.000Z</published>
    <updated>2019-12-18T13:14:48.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>There is a string.</p><blockquote><p>aabbccdeffg</p></blockquote><p>We want to compress this string to …</p><blockquote><p>2a2b2cde2fg</p></blockquote><p>So, When a string is given, Write the solution functions(compress_str, extract_str) that changes it to {the number_of_char|char}+, vice versa.</p><h4 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h4><ul><li>Given string consists of characters, A-z.</li><li>The number of a character in given string is unlimited.</li><li>If the number of character is 1, it’s typing is skipped<ul><li>Example<blockquote><p>aacbb -&gt; 2ac2b</p></blockquote></li></ul></li><li>Only 1 character can be processed.<ul><li>Example<blockquote><p>abab -&gt; abab<br>aabb -&gt; 2a2b</p></blockquote></li></ul></li><li>Also, Vice versa can be performed.<ul><li>Example<blockquote><p>4a12bc -&gt; aaaabbbbbbbbbbbbc</p></blockquote></li></ul></li></ul><h4 id="Example-of-inputs"><a href="#Example-of-inputs" class="headerlink" title="Example of inputs"></a>Example of inputs</h4><blockquote><p>“aaaabbbbbbbbbbbbc”<br>“abcabc”<br>“2a3bc”<br>“a4b3c”</p></blockquote><h4 id="Explaination-inputs"><a href="#Explaination-inputs" class="headerlink" title="Explaination inputs"></a>Explaination inputs</h4><ul><li>Example #1-1<ul><li>“aaaabbbbbbbbbbbbc” -&gt; “4a12bc”</li></ul></li><li>Example #1-2<ul><li>“abcabc” -&gt; “abcabc”</li><li>Because the function can process only 1 character, there is no change.</li></ul></li><li>Example #2-1<ul><li>“2a3bc” -&gt; “aabbbc”</li></ul></li><li>Example #2-2<ul><li>“a4b3c” -&gt; “abbbbccc”</li></ul></li></ul><h2 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a>Codes</h2><figure class="highlight javascript"><figcaption><span>solution.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compress_str</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count =  <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> answer = <span class="string">""</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;str.length; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> c = str.substr(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> nextC = str.substr(i+<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(c === nextC)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(count===<span class="number">1</span>)&#123;</span><br><span class="line">                answer = answer + c;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                answer = answer + count.toString() + c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        count = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extract_str</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> answer = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;str.length; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> c = str.substr(i, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Number</span>.isInteger(<span class="built_in">parseInt</span>(c)))&#123;</span><br><span class="line">            count = count + c;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(count===<span class="string">""</span>)&#123;</span><br><span class="line">                answer = answer + c;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="built_in">parseInt</span>(count); j++)&#123;</span><br><span class="line">                    answer = answer + c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="result"><a href="#result" class="headerlink" title="result"></a>result</h2><img src="https://github.com/YunSeongha/yunseongha.github.io/blob/master/2019/12/18/Character-compression/result.JPG?raw=true" class="" title="result">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;There is a string.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;aabbccdeffg&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://yunseongha.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>How to write git commit messages</title>
    <link href="https://yunseongha.github.io/2019/12/17/How-to-write-git-commit-messages/"/>
    <id>https://yunseongha.github.io/2019/12/17/How-to-write-git-commit-messages/</id>
    <published>2019-12-17T02:38:50.000Z</published>
    <updated>2019-12-17T02:47:52.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><p>I find good post about good git commit messages<br>“7 promises for writing good git commit messages” - Toast Meetup!</p><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><a href="https://meetup.toast.com/posts/106" title="" target="_blank">좋은 git 커밋 메시지를 작성하기 위한 7가지 약속 - Toast Meetup!</a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Contents&quot;&gt;&lt;a href=&quot;#Contents&quot; class=&quot;headerlink&quot; title=&quot;Contents&quot;&gt;&lt;/a&gt;Contents&lt;/h2&gt;&lt;p&gt;I find good post about good git commit message
      
    
    </summary>
    
    
      <category term="git" scheme="https://yunseongha.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>shellscript - automate-clone</title>
    <link href="https://yunseongha.github.io/2019/12/16/shellscript-automate-clone/"/>
    <id>https://yunseongha.github.io/2019/12/16/shellscript-automate-clone/</id>
    <published>2019-12-15T22:42:27.000Z</published>
    <updated>2019-12-15T23:58:22.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>I want to perform git clone a lot. (about 50times)<br>It takes 2 hours. (Don’t you believe? I don’t still believe that)</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>To do above, It is really dumb thing<br>So, I solve it to use shellscript and text file</p><h4 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h4><ol><li>Text file (It has ID, the repo name or the subset of repo name)<ul><li>ex) in text file,<blockquote><p>yoonsungha_id yoonsungha_repo</p></blockquote></li></ul></li><li>Shellscript file (bitbucket example)<ul><li>ex)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> input</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    repoName=$(<span class="built_in">echo</span> <span class="variable">$&#123;input&#125;</span> | awk -F<span class="string">' '</span> <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">    repoOwnerID=$(<span class="built_in">echo</span> <span class="variable">$&#123;input&#125;</span> | awk -F<span class="string">' '</span> <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line">    git <span class="built_in">clone</span> https://&lt;myid&gt;@bitbucket.org/<span class="variable">$&#123;repoOwnerID&#125;</span>/<span class="variable">$&#123;repoName&#125;</span>.git</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat &lt;text file&gt; | sh &lt;bash file&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;I want to perform git clone a lot. (about 50times)
      
    
    </summary>
    
    
      <category term="bash shellscript" scheme="https://yunseongha.github.io/categories/bash-shellscript/"/>
    
    
  </entry>
  
  <entry>
    <title>command - create directory</title>
    <link href="https://yunseongha.github.io/2019/12/16/command-create-directory/"/>
    <id>https://yunseongha.github.io/2019/12/16/command-create-directory/</id>
    <published>2019-12-15T21:55:25.000Z</published>
    <updated>2019-12-15T22:34:16.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>I want to create folders hw1, hw2, … hw10<br>Then, Should I perform “mkdir hw#” 10 times?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>To do above, It is really dumb thing<br>So, I solve it to use shellscript below</p><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cur=1</span><br><span class="line">$ <span class="keyword">while</span> [ <span class="variable">$cur</span> -le 10 ]; <span class="keyword">do</span> mkdir hw<span class="variable">$&#123;cur&#125;</span>; <span class="built_in">let</span> cur=cur+1; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><img src="https://github.com/YunSeongha/yunseongha.github.io/blob/master/2019/12/16/command-create-directory/result.JPG?raw=true" class="" title="result">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;I want to create folders hw1, hw2, … hw10&lt;br&gt;Then,
      
    
    </summary>
    
    
      <category term="bash shellscript" scheme="https://yunseongha.github.io/categories/bash-shellscript/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yunseongha.github.io/2019/12/16/hello-world/"/>
    <id>https://yunseongha.github.io/2019/12/16/hello-world/</id>
    <published>2019-12-15T19:44:07.847Z</published>
    <updated>2019-12-15T21:53:07.378Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="first" scheme="https://yunseongha.github.io/categories/first/"/>
    
    
      <category term="hexo, chiangmai" scheme="https://yunseongha.github.io/tags/hexo-chiangmai/"/>
    
  </entry>
  
</feed>
